# Objectives:
# 1 - Improving the student's skills in defining classes from scratch;
# 2 - Using composition.
# Scenario:
# Now we're going to embed the Point class (see Lab 3.4.1.14) inside another class. 
# Also, we're going to put three points into one class, which will let us define a triangle. How can we do it?
# The new class will be called Triangle and this is the list of our expectations:
# the constructor accepts three arguments - all of them are objects of the Point class;
# the points are stored inside the object as a private list;
# the class provides a parameterless method called perimeter(), which calculates the perimeter of the triangle 
# described by the three points; the perimeter is a sum of all legs' lengths (we mention it for the record, 
# although we are sure that you know it perfectly yourself.)
# Complete the template we've provided in the editor. Run your code and check whether the evaluated perimeter 
# is the same as ours.
# Below you can copy the Point class code we used in the previous lab:
# Expected output
# 3.414213562373095

import math


class Point:
    def __init__(self, x=0.0, y=0.0):
        self.__x = x
        self.__y = y


class Triangle:
    def __init__(self, vertice1, vertice2, vertice3):
        self.v1 = vertice1 
        self.v2 = vertice2 
        self.v3 = vertice3

    def perimeter(self):
        print(self.v1._Point__x)
        print(self.v1._Point__x)
        side1 = math.hypot(abs(self.v1._Point__x - self.v2._Point__x),abs(self.v1._Point__y - self.v2._Point__y))
        side2 = math.hypot(abs(self.v1._Point__x - self.v3._Point__x),abs(self.v1._Point__y - self.v3._Point__y))
        side3 = math.hypot(abs(self.v2._Point__x - self.v3._Point__x),abs(self.v2._Point__y - self.v3._Point__y))
        return side1 + side2 + side3
        

triangle = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))
print(triangle.perimeter())

