# 4.3.1.17-LAB-Evaluating-students-results
# Objectives:
# 1 - improve the student's skills in operating with files (reading). 
# 2 - Perfecting the student's abilities in defining and using self-defined exceptions and dictionaries.
# Scenario:
# Prof. Jekyll conducts classes with students and regularly makes notes in a text file. Each line of the file contains three elements: the student's first name, 
# the student's last name, and the number of point the student received during certain classes.
# The elements are separated with white spaces. Each student may appear more than once inside Prof. Jekyll's file.
# The file may look as follows: John Smith 5 Anna Boleyn 4.5 John Smith 2 Anna Boleyn 11 Andrew Cox 1.5
# Your task is to write a program which:
# Asks the user for Prof. Jekyll's file name; reads the file contents and counts the sum of the received points for each student; prints a simple (but sorted)
# report, just like this one: Andrew Cox 1.5 Anna Boleyn 15.5 John Smith 7.0
# Note:
# 1 - Your program must be fully protected against all possible failures: the file's non-existence, the file's emptiness, or any input data failures; 
# encountering any data error should cause immediate program termination, and the erroneous should be presented to the user;
# 2 - Implement and use your own exceptions hierarchy - we've presented it in the editor; the second exception should be raised when a bad line is detect, 
# and the third when the source file exists but is empty.
# Tip: Use a dictionary to store the students' data.

class StudentsDataException(Exception):
    pass


class BadLine(StudentsDataException):
    def __init__(self, message):
        StudentsDataException.__init__(self)
        print(message)
        exit()


class FileEmpty(StudentsDataException):
    def __init__(self, message):
        StudentsDataException.__init__(self)
        print(message)
        exit()


file_name = input("Enter file name: ")
try:
    file_stream = open(file_name,"rt")
except FileNotFoundError:
    print("No such file or directory: '{}'".format(file_name))
    exit()
except:
    print("Error opening file")
    exit()
student_points = {}
max_len = 0
try:
    line = file_stream.readline()
    line_no = 1
    assert len(line) > 0
    while line != "":
        line = line.split()
        student_name = line[0] + " " + line[1]
        points = line[2]
        if student_name not in student_points:
            student_points[student_name] = float(points)
        else:
            student_points[student_name] += float(points)
        if len(student_name) > max_len:
            max_len = len(student_name)    
        line = file_stream.readline()
        line_no += 1
except AssertionError:
    raise FileEmpty("File empty")
except:
    raise BadLine("Bad line {}: {}".format(line_no, line))
student_points = sorted(student_points.items(),key=lambda x:x[0])
for student in student_points:
    padding = (max_len-len(student[0]))
    print(student[0]," "*padding,student[1],)
file_stream.close()

