# 4.3.1.15-LAB-Character-frequency-histogram
# Objectives:
# 1 - Improving the student's skills in operating with files (reading). 2 - Using data collections for counting numerous data.
# Scenario:
# A text file contains some text (nothing unusual) but we need to know how often (or how rare) each letter appears in the text. Such an analysis may be useful in cryptography, so we want to be able to do that in reference to the Latin alphabet.
# Your task is to write a program which:
# 1 - Asks the user for the input file's name; 2 - Reads the file (if possible) and counts all the Latin letters (lower- and upper-case letters are treated as equal) 3 - Prints a simple histogram in alphabetical order (only non-zero counts should be presented) 4 - Create a test file for the code, and check if your histogram contains valid results.
# Assuming that the test file contains just one line filled with: aBc The expected output should look as follows: a -> 1 b -> 1 c -> 1
# Tip: We think that a dictionary is a perfect d

# For Windows, you may need to run:
# pip install windows-curses

from curses.ascii import isalnum, isalpha
from os import strerror

try:
    source_file = input("Enter file name: ")
    cnt = 0

    source_stream = open(source_file, "rt")
    content = source_stream.read()

    char_dict = {}
    for char in content:
        if isalnum(char):
            char = char.lower()
            if char in char_dict.keys():
                char_dict[char] += 1
            else:
                char_dict[char] = 1

    for key, value in char_dict.items():
        print(str(key) + "-->" + str(value) + "\n",end="")

    source_stream.close()

except IOError as e:
    print("I/O error occurred: ", strerror(e.errno))
